<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>首页 on 锦瑟无端</title><link>https://ivylet.github.io/</link><description>Recent content in 首页 on 锦瑟无端</description><generator>Hugo -- gohugo.io</generator><language>cn</language><managingEditor>1209073747@qq.com (Yike)</managingEditor><webMaster>1209073747@qq.com (Yike)</webMaster><copyright>Copy, _right?_ :thinking_face:</copyright><lastBuildDate>Thu, 10 Nov 2022 11:18:29 +0800</lastBuildDate><atom:link href="https://ivylet.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>STL中常用算法</title><link>https://ivylet.github.io/posts/chapter01/cpp-stl-argo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>1209073747@qq.com (Yike)</author><guid>https://ivylet.github.io/posts/chapter01/cpp-stl-argo/</guid><description>STL中常用算法 # STL中定义了常用的一些算法，比如遍历，查找，排序等一些算法。</description></item><item><title>常用算法储备知识</title><link>https://ivylet.github.io/posts/chapter01/datastru/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>1209073747@qq.com (Yike)</author><guid>https://ivylet.github.io/posts/chapter01/datastru/</guid><description>时间复杂度 # 对数 ： 每轮排除一半情况 常用于二分法 指数：每轮分别出两倍情况 线性对数：一般为两层循环相互独立，一层为n一层为对数 常常出现在快速排序 空间复杂度 # 位运算 # 位运算有（&amp;amp;、|、^、~、&amp;raquo;、&amp;laquo;）这几种方法，以下为正且位数相同的二进制数进行的位运算，但是还会有其他特殊情况，比如二进制数非正，位数不同的情况。</description></item><item><title>C++ STL</title><link>https://ivylet.github.io/posts/chapter01/cpp-stl-intro/</link><pubDate>Thu, 10 Nov 2022 11:18:29 +0800</pubDate><author>1209073747@qq.com (Yike)</author><guid>https://ivylet.github.io/posts/chapter01/cpp-stl-intro/</guid><description>什么是C++标准模板库（STL）？ # 标准模板库 STL（Standard Template Library），是 C++ 标准库的一部分，不需要单独安装，只需要#include 头文件。</description></item><item><title>Vue3概述</title><link>https://ivylet.github.io/engineering/frontend/vue/vue/</link><pubDate>Tue, 11 Oct 2022 00:00:00 +0000</pubDate><author>1209073747@qq.com (Yike)</author><guid>https://ivylet.github.io/engineering/frontend/vue/vue/</guid><description>Vue3.</description></item><item><title/><link>https://ivylet.github.io/about/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>1209073747@qq.com (Yike)</author><guid>https://ivylet.github.io/about/</guid><description>这是关于页面</description></item><item><title/><link>https://ivylet.github.io/engineering/auth/reademe/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>1209073747@qq.com (Yike)</author><guid>https://ivylet.github.io/engineering/auth/reademe/</guid><description>NextAuth鉴权 # callback</description></item><item><title/><link>https://ivylet.github.io/engineering/frontend/react/clis/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>1209073747@qq.com (Yike)</author><guid>https://ivylet.github.io/engineering/frontend/react/clis/</guid><description>一些脚手架工具</description></item><item><title/><link>https://ivylet.github.io/engineering/frontend/react/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>1209073747@qq.com (Yike)</author><guid>https://ivylet.github.io/engineering/frontend/react/readme/</guid><description/></item><item><title/><link>https://ivylet.github.io/engineering/frontend/react_native/startup_firsttake/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>1209073747@qq.com (Yike)</author><guid>https://ivylet.github.io/engineering/frontend/react_native/startup_firsttake/</guid><description>准备Android环境 # 1.</description></item><item><title/><link>https://ivylet.github.io/engineering/frontend/tools/echarts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>1209073747@qq.com (Yike)</author><guid>https://ivylet.github.io/engineering/frontend/tools/echarts/</guid><description>Install # npm install echarts --save 概念?</description></item><item><title/><link>https://ivylet.github.io/engineering/frontend/tools/packages/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>1209073747@qq.com (Yike)</author><guid>https://ivylet.github.io/engineering/frontend/tools/packages/</guid><description>zod # 自定义类型认证。TypeScript是在编码时进行类型认证，那么如何判断运行后的某个数据是否符合要求呢？比如文本框是否输入了合适的数据。那么就有这个zod的包了。</description></item><item><title/><link>https://ivylet.github.io/engineering/frontend/tools/tailwindcss/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>1209073747@qq.com (Yike)</author><guid>https://ivylet.github.io/engineering/frontend/tools/tailwindcss/</guid><description>install # npm install -D tailwindcss npx tailwindcss init then</description></item><item><title/><link>https://ivylet.github.io/engineering/frontend/vue/vue-router/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>1209073747@qq.com (Yike)</author><guid>https://ivylet.github.io/engineering/frontend/vue/vue-router/</guid><description/></item><item><title/><link>https://ivylet.github.io/engineering/frontend/vue/vue-vuex/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>1209073747@qq.com (Yike)</author><guid>https://ivylet.github.io/engineering/frontend/vue/vue-vuex/</guid><description/></item><item><title/><link>https://ivylet.github.io/engineering/full-stack/database/indexdb/indexdb/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>1209073747@qq.com (Yike)</author><guid>https://ivylet.github.io/engineering/full-stack/database/indexdb/indexdb/</guid><description>简介以及特点 # IndexedDB、Cookie、localStorage和sessionStorage是客户端存储解决方案，它们各自具有不同的特点和适用场景：</description></item><item><title/><link>https://ivylet.github.io/engineering/full-stack/database/postgres/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>1209073747@qq.com (Yike)</author><guid>https://ivylet.github.io/engineering/full-stack/database/postgres/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</guid><description/></item><item><title/><link>https://ivylet.github.io/engineering/full-stack/javascript/howfrontgetdata/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>1209073747@qq.com (Yike)</author><guid>https://ivylet.github.io/engineering/full-stack/javascript/howfrontgetdata/</guid><description>前端如何获取数据?</description></item><item><title/><link>https://ivylet.github.io/engineering/full-stack/nextjs/0001/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>1209073747@qq.com (Yike)</author><guid>https://ivylet.github.io/engineering/full-stack/nextjs/0001/</guid><description>nextjs分为app router和文件系统路由</description></item><item><title/><link>https://ivylet.github.io/engineering/full-stack/nextjs/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>1209073747@qq.com (Yike)</author><guid>https://ivylet.github.io/engineering/full-stack/nextjs/readme/</guid><description>关于React的框架 NextJS</description></item><item><title/><link>https://ivylet.github.io/engineering/full-stack/react/0001/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>1209073747@qq.com (Yike)</author><guid>https://ivylet.github.io/engineering/full-stack/react/0001/</guid><description>为什么React? 原生JavaScript操作DOM繁琐 操作实DOM 浏览器会经常重排 不够模块化 组件化 代码复用率低 虚拟DOM 虚拟DOM属性少 更轻、最终会被React转换为真实DOM</description></item><item><title/><link>https://ivylet.github.io/engineering/full-stack/react/0002/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>1209073747@qq.com (Yike)</author><guid>https://ivylet.github.io/engineering/full-stack/react/0002/</guid><description>Prisma ORM对象关系映射 NextAuth</description></item><item><title/><link>https://ivylet.github.io/engineering/full-stack/supabase/intro/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>1209073747@qq.com (Yike)</author><guid>https://ivylet.github.io/engineering/full-stack/supabase/intro/</guid><description>install # npm install @supabase/supabase-js 初始化</description></item><item><title/><link>https://ivylet.github.io/engineering/issues/documentautosave/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>1209073747@qq.com (Yike)</author><guid>https://ivylet.github.io/engineering/issues/documentautosave/</guid><description>文件实时保存 打开文档就获取信息 使用二进制传输，如果我修改了</description></item><item><title/><link>https://ivylet.github.io/engineering/linux/linux%E5%A4%9A%E7%BA%BF%E7%A8%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>1209073747@qq.com (Yike)</author><guid>https://ivylet.github.io/engineering/linux/linux%E5%A4%9A%E7%BA%BF%E7%A8%8B/</guid><description>两个进程函数 # fork() 函数 在 LINUX 系统创建一个新进程的唯一方法是使用fork()函数.</description></item><item><title/><link>https://ivylet.github.io/engineering/linux/linxu%E5%A4%9A%E8%BF%9B%E7%A8%8B%E7%BC%96%E7%A8%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>1209073747@qq.com (Yike)</author><guid>https://ivylet.github.io/engineering/linux/linxu%E5%A4%9A%E8%BF%9B%E7%A8%8B%E7%BC%96%E7%A8%8B/</guid><description>逻辑流与并发流 # 并发 # 逻辑控制流 # 并发流及相关概念 # 并发与并行 # 进程基本概念 # 进程概念、结构与描述 # 什么是进程 # 进程结构 # 进程属性(保存在PCB中) # 进程描述信息 进程控制信息 进程资源信息</description></item><item><title/><link>https://ivylet.github.io/engineering/linux/%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>1209073747@qq.com (Yike)</author><guid>https://ivylet.github.io/engineering/linux/%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/</guid><description>常用指令 # vi编辑器 # 命令行指令 vi filename 编辑器内部命令行指令 :set nu 显示行号 :w 保存 :w newfilename 另存为 :/word 查询单词word :/word n N (n 向下寻找,N 向上寻找) i 插入 y 复制 p 粘贴 d 删除 w 切换到下一个单词 :wq 保存并退出 文件管理指令 # 删除操作 # 删除文件</description></item><item><title/><link>https://ivylet.github.io/engineering/linux/%E8%99%9A%E6%8B%9F%E6%9C%BA/docker/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>1209073747@qq.com (Yike)</author><guid>https://ivylet.github.io/engineering/linux/%E8%99%9A%E6%8B%9F%E6%9C%BA/docker/</guid><description>docker-compose: command not found问题的两种常用方法_zhiweicoding的博客-CSDN博客</description></item><item><title/><link>https://ivylet.github.io/engineering/linux/%E8%99%9A%E6%8B%9F%E6%9C%BA/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>1209073747@qq.com (Yike)</author><guid>https://ivylet.github.io/engineering/linux/%E8%99%9A%E6%8B%9F%E6%9C%BA/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</guid><description>无法找到软件包 # 更换软件源</description></item><item><title/><link>https://ivylet.github.io/engineering/productiondesign/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>1209073747@qq.com (Yike)</author><guid>https://ivylet.github.io/engineering/productiondesign/readme/</guid><description>产品经理</description></item><item><title>shadcn</title><link>https://ivylet.github.io/engineering/frontend/ui/radixui/shadcn/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>1209073747@qq.com (Yike)</author><guid>https://ivylet.github.io/engineering/frontend/ui/radixui/shadcn/</guid><description>npx create-next-app@latest my-app --typescript --tailwind --eslint npx shadcn-ui@latest init shadcn/ui 中文站</description></item><item><title>vue组件开发</title><link>https://ivylet.github.io/engineering/frontend/vue/vue-component/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>1209073747@qq.com (Yike)</author><guid>https://ivylet.github.io/engineering/frontend/vue/vue-component/</guid><description>&amp;lt;script setup&amp;gt; import { ref } from &amp;#39;vue&amp;#39; const count = ref(0) &amp;lt;/script&amp;gt; &amp;lt;template&amp;gt; &amp;lt;button @click=&amp;#34;count++&amp;#34;&amp;gt;You clicked me {{ count }} times.</description></item><item><title>全部文章</title><link>https://ivylet.github.io/all/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>1209073747@qq.com (Yike)</author><guid>https://ivylet.github.io/all/</guid><description/></item><item><title>初始化</title><link>https://ivylet.github.io/engineering/frontend/vue/vue3-start-setup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>1209073747@qq.com (Yike)</author><guid>https://ivylet.github.io/engineering/frontend/vue/vue3-start-setup/</guid><description>创建一个 Vue 应用 # &amp;gt; npm init vue@latest 这一指令将会安装并执行 create-vue，它是 Vue 官方的项目脚手架工具。你将会看到一些诸如 TypeScript 和测试支持之类的可选功能提示：</description></item><item><title>后端技术</title><link>https://ivylet.github.io/engineering/backend/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>1209073747@qq.com (Yike)</author><guid>https://ivylet.github.io/engineering/backend/</guid><description/></item><item><title>基础算法一</title><link>https://ivylet.github.io/posts/chapter02/acwing/base/base-1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>1209073747@qq.com (Yike)</author><guid>https://ivylet.github.io/posts/chapter02/acwing/base/base-1/</guid><description>快速排序 # 主要思想: # 在数组中选择一个值，然后遍历数组，比这个值大的放到这个值后边，比这个值小的放到这个值的前边。</description></item><item><title>搜索与图论</title><link>https://ivylet.github.io/posts/chapter02/acwing/base/search_and_graph/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>1209073747@qq.com (Yike)</author><guid>https://ivylet.github.io/posts/chapter02/acwing/base/search_and_graph/</guid><description>图论 # Floyd算法 # 主要思想是: 循环邻接矩阵中查找每个点到另外一个点的最短距离，不仅是看直接距离，也还要通过计算中转点。比如计算A到B的距离，要比较A到C的距离与C到B的距离的和、A到B的直接距离的最小值来判断，中转点可以是其他节点，所以代码实现中出现了三重循环。</description></item><item><title>数学相关问题</title><link>https://ivylet.github.io/posts/chapter02/acwing/base/math/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>1209073747@qq.com (Yike)</author><guid>https://ivylet.github.io/posts/chapter02/acwing/base/math/</guid><description>秦九韶算法 # 使用秦九韶算法可以计算多项式的值，或进制转换。 例子：计算多项式的值。a[i]表示多项式中的x的i次幂的系数。</description></item><item><title>数据科学</title><link>https://ivylet.github.io/engineering/datascience/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>1209073747@qq.com (Yike)</author><guid>https://ivylet.github.io/engineering/datascience/</guid><description/></item><item><title>数据结构</title><link>https://ivylet.github.io/posts/chapter02/acwing/base/datestruct/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>1209073747@qq.com (Yike)</author><guid>https://ivylet.github.io/posts/chapter02/acwing/base/datestruct/</guid><description>链表 # 拿数组模拟链表,其实也就是静态链表.</description></item><item><title>算法竞赛常用STL</title><link>https://ivylet.github.io/posts/chapter01/argo-datastru/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>1209073747@qq.com (Yike)</author><guid>https://ivylet.github.io/posts/chapter01/argo-datastru/</guid><description>数据结构 # vector[可变数组] # vector是一种变长数组，即可以自动改变长度的数组。 头文件</description></item><item><title>背包问题</title><link>https://ivylet.github.io/posts/chapter02/acwing/base/dp/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>1209073747@qq.com (Yike)</author><guid>https://ivylet.github.io/posts/chapter02/acwing/base/dp/</guid><description>背包DP # 01背包 # 每件物品最多只用一次。</description></item><item><title>贪心</title><link>https://ivylet.github.io/posts/chapter02/acwing/base/greedy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>1209073747@qq.com (Yike)</author><guid>https://ivylet.github.io/posts/chapter02/acwing/base/greedy/</guid><description> 与区间有关的问题 #</description></item><item><title>问题汇总</title><link>https://ivylet.github.io/engineering/frontend/vue/vue-problem/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>1209073747@qq.com (Yike)</author><guid>https://ivylet.github.io/engineering/frontend/vue/vue-problem/</guid><description>Vite启动后提示“Network: use &amp;ndash;host to expose“，且无法通过网络IP访问服务 # 解决方法：</description></item></channel></rss>